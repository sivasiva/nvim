## Base ---
snippet if
	if $1 then
		$0
	end if;
endsnippet

snippet ife
	if $1 then
		$0
	else

	end if;
endsnippet

snippet sel
select $2
from $1
$0
;
endsnippet

snippet ts "timestamp columns"
created_at timestamptz not null default now(),
updated_at timestamptz not null default now()
endsnippet


snippet c "column"
$1 ${2:varchar(150)},
$0
endsnippet

snippet fk "fk - column constraint"
$1_id integer not null references ${2:$1} ($1_id),
endsnippet

snippet if "if block"
if $1
	$0
end if;
endsnippet

snippet iff "if found"
if found
then
	$0
end if;
endsnippet

snippet ifn "if not found"
if not found
then
	$0
end if;
endsnippet

snippet ife "if else block"
if $1
then
	-- do something;
else
	-- do something else;
end if;
$0
endsnippet

snippet else "else block"
else
	-- do something else;
endsnippet

snippet loop "loop"
	loop
		$0
	end loop;
endsnippet

## Tables ---
snippet t "table defn"
create table if not exists $1s (
	$1_id serial primary key,

	$0
-- location_id int not null references locations (location_id),
	archived    boolean				 default false,
	archived_at timestamptz,
	created_at  timestamptz			 not null default now(),
	updated_at  timestamptz			 not null default now()
);

endsnippet

snippet t "join table"
create table if not exists $1(
	$1_id		serial primary key,
	${2}_id integer not null references $2s ($2_id),
	${3}_id integer not null references $3s ($3_id),
	-- other fields
	created_at timestamptz not null default now(),
	updated_at timestamptz not null default now()
);

drop index if exists $1_$2_$3_idx;
create index $1_$2_$3_idx
	on $1 ($2_id, $3_id);
endsnippet

snippet tdr "drop table"
drop table if exists $1 cascade;
endsnippet
snippet ins "insert"
insert
into $1 ($2)
values($3);
endsnippet



snippet log "raise notice"
raise notice '${1:key} %', ${2:value}
endsnippet

snippet raise "Raise exception"
raise exception '$1 %', $0;
endsnippet

snippet raise "raise using message"
raise exception
using message = ${1:predefined_message_variable};
endsnippet

snippet err "Raise exception"
raise exception '$1 %', $0;
endsnippet

snippet ex "Raise exception"
raise exception '$1 %', $0;
endsnippet

snippet win
select ${1:FIELDS}
	over (partition by ${2:GROUPING} order by ${3:SORTING})
	from ${4:TABLE};
endsnippet

snippet ref "Reference Link" b
--
-- Ref: $1
--
endsnippet

snippet comm "Block" b
--
-- $1
--
endsnippet

## Functions ---
snippet fn "returns table rows"
-- ----------------------------------------------------------------------------
-- $1 function
-- ----------------------------------------------------------------------------
create or replace function $1()
	returns setof ${2:table_name}
as $$
begin
return query	select *
							from $2
							where blah = 1;
end
$$ language plpgsql;
-- ----------------------------------------------------------------------------
endsnippet



snippet fn "CRUD - create"
-- ----------------------------------------------------------------------------
-- $1 CRUD create
-- ----------------------------------------------------------------------------
create or replace function create_${1:model}(
	_name varchar,
	out _$1_id int
)
as $$
declare
	-- some int;
begin

insert
into ${2:$1}s (created_at)
values (now())
returning $1_id
	into _$1_id;

end;
$$ language plpgsql;
-- ----------------------------------------------------------------------------
endsnippet

snippet fn "CRUD - update"
-- ----------------------------------------------------------------------------
-- $1 function
-- ----------------------------------------------------------------------------
create or replace function update_$1(
	_$1_id int,
	_name varchar
)
as $$
declare

begin



update $2s

set updated_at = now()
where id = _$1_id;

if FOUND
then return true;
else
	return false;
end if;
end;
$$
language plpgsql;
-- ----------------------------------------------------------------------------
endsnippet

snippet fn "json"
-- ----------------------------------------------------------------------------
-- $1 function
-- ----------------------------------------------------------------------------
create or replace function $1_json(${2:_id int})
	returns json
as $$
declare
-- found_$1 $1s;
begin
	$0
	-- return (select json_build_object('id', found_$1.id));
end;
$$ language plpgsql;

-- drop function if exists $1();
-- ----------------------------------------------------------------------------
endsnippet

snippet fn "json - with nested associations"
-- ----------------------------------------------------------------------------
-- $1 function
-- FROM: https://bender.io/2013/09/22/returning-hierarchical-data-in-a-single-sql-query/
-- ----------------------------------------------------------------------------
create or replace function $1(_id int)
returns json
as $$
declare
-- name varchar;
begin
	return (
		select row_to_json(details)
		from (
			select e.*,
			(
				select json_agg(row_to_json(attendees))
				from attendees
				where event_id = e.event_id
			) as attendees,
			(
				select json_agg(row_to_json(messages))
				from messages
				where event_id = e.event_id
			) as messages,
			row_to_json(l.*) as location
			from events e
			inner join locations l using(location_id)
			where e.event_id = _id
		) details
	);

end;
$$ language plpgsql;
-- ----------------------------------------------------------------------------

endsnippet

snippet fn "regular"
-- ----------------------------------------------------------------------------
-- $1 function
-- ----------------------------------------------------------------------------
create or replace function $1()
	returns void
as $$
declare
-- name varchar;
begin
	$0
	return;
end;
$$ language plpgsql;

-- drop function if exists $1();
-- ----------------------------------------------------------------------------
endsnippet

## Triggers ---
snippet tr "function"
-- ----------------------------------------------------------------------------
-- trfn_$1 function
-- ----------------------------------------------------------------------------
create or replace function trfn_$1()
	returns trigger
as $$
begin
	if TG_OP = 'INSERT'
	then
		NEW.created_at:= now();
		NEW.updated_at := now();
	elseif TG_OP = 'UPDATE'
		then
			-- NEW.created_at := OLD.created_at;
			NEW.updated_at := now();
	end if;

	return NEW;
end;
$$ language 'plpgsql';

drop trigger if exists $1
on $2;

create trigger tr_$1
before insert or update
	on $2
for each row
execute procedure trfn_$1();
-- ----------------------------------------------------------------------------
endsnippet


#snippet idx
#create index index_${1:table}_on_${2:field} on $1 ($2);
#endsnippet

## Indexing ---
snippet uidx
create unique index unique_index_${1:table}_on_${2:field} on $1 using btree ($2);
endsnippet

snippet hidx
-- http://blog.codeship.com/unleash-the-power-of-storing-json-in-postgres/
create index hstore_index_on_${1:field}_data on ${2:table} using gin ($1);
endsnippet

snippet jidx
-- http://blog.codeship.com/unleash-the-power-of-storing-json-in-postgres/
create index jsonb_index_on_${1:field}_data on ${2:table} using gin ($1);
endsnippet

snippet idx "table index" b
--
-- $1_idx
--
drop index if exists $1_idx;
create index $1_idx on $2 ($3);
--

endsnippet

## Seeding ---
snippet seed "seed from json"
create or replace function seed_$1(_in_json json)
	returns integer
as $_$
declare
	rec     json;
	counter integer = 0;
	success boolean = false;
begin
	select count(*)
	from $1
	into counter;

	if counter > 0
	then
		return counter;
	else
		for rec in
			select *
			from json_array_elements((_in_json ->> '$1') :: json)
		loop
			insert
				into $1 (${2:$1}_name)
				values ( rec ->> '$2_name' );
			--       raise notice 'output from space %', i ->> 'type';
			-- select create_seed_user(
					-- (rec ->> 'fname') :: text,
					-- (rec ->> 'lname') :: text,
					-- (rec ->> 'email') :: text,
					-- (rec ->> 'password') :: text
			-- )
			-- into success;

			if found
			then
				counter = counter + 1;
			end if;

		end loop;
	end if;

	return counter;
end;
$_$ language plpgsql;
endsnippet

## JSON Manipulation ---
snippet j "get json value"
${1:json_string} ->> '${2:key}'
endsnippet

## Migration ---
snippet mi "sql-migrate blocks" b
-- +migrate Up
-- +migrate StatementBegin
$0
-- +migrate StatementEnd


-- +migrate Down
-- +migrate StatementBegin
-- drop table if exists agents cascade;
-- +migrate StatementEnd
endsnippet

snippet db
create database $1_db;
create database $1_test;

grant all privileges on database $1_db to docker;
grant all privileges on database $1_test to docker;

$0
endsnippet

# snippet sec "segment" b
# -- `!p snip.rv = left(80, ' ', t[1])` $1 `!p snip.rv = right(80, ' ', t[1])`
# endsnippet





# snippet fk "fk - alter table - add"
# alter table ${1:TABLE} add column ${2:COL} ${3:TYPE} ${4:check (DESCRIPTION <> '')};
# endsnippet

# snippet add "constraint - check"
# alter table ${1:TABLE} add constraint ${2:check|constraint};
# endsnippet

# snippet add "constraint"
# alter table ${1:TABLE} add constraint ${2:check|constraint};
# endsnippet

# snippet remc
# alter table ${1:TABLE} drop column ${2:COL} ${3:cascade}; -- CASCADE REMOVES ROWS IN DEPENDANT TABLES;
# endsnippet

# snippet pk
# ${1:NAME} ${2:INTEGER} primary key,
# $0
# endsnippet

# snippet fk "define"
# ${1:FIELD}_ID INTEGER references ${2:TABLE} ${3:on delete restrict|cascade|no action|set null|set default},
# $0
# endsnippet

# snippet fk "add"
# alter table ${1:CHILD_TABLE} add foreign key (${2:PARENT_TABLE}_ID) references $2S;
# endsnippet
snippet trg
create trigger $1_TRIGGER
before ${2: insert or update } on ${3:TABLE}
for each row
execute procedure $1();
endsnippet

snippet upd "update table" b
update ${1:table} as $2
set
	$3
where $4 = $0;
endsnippet

snippet mv "materialized view" b
create materialized view $1 as
	select
		id,
		name,
		created_at,
		updated_at
	from ${2:table_name}
	where archived = false
	order by ${3:node_path asc, name asc};

${4:-- add indexes for $1 here ...}
endsnippet

snippet id
id uuid primary key default gen_random_uuid(),
endsnippet

snippet uuid
id uuid primary key default gen_random_uuid(),
endsnippet

snippet f "function"
--
-- $1 function --
--
create or replace function $1() returns void as
$$
declare
-- variables go here
begin
end;
$$ language plpgsql;
-- $1 function --

endsnippet

snippet tern


---- create above / drop below ----


endsnippet
